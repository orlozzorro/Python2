
# # Планеты вращаются вокруг звезд по эллиптическим орбитам.
# # Назовем самой далекой планетой ту, орбита которой имеет
# # самую большую площадь. Напишите функцию
# # find_farthest_orbit(list_of_orbits), которая среди списка орбит
# # планет найдет ту, по которой вращается самая далекая
# # планета. Круговые орбиты не учитывайте: вы знаете, что у
# # вашей звезды таких планет нет, зато искусственные спутники
# # были были запущены на круговые орбиты. Результатом
# # функции должен быть кортеж, содержащий длины полуосей
# # эллипса орбиты самой далекой планеты. Каждая орбита
# # представляет из себя кортеж из пары чисел - полуосей ее
# # эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# # где a и b - длины полуосей эллипса. При решении задачи
# # используйте списочные выражения. Подсказка: проще всего
# # будет найти эллипс в два шага: сначала вычислить самую
# # большую площадь эллипса, а затем найти и сам эллипс,
# # имеющий такую площадь. Гарантируется, что самая далекая
# # планета ровно одна
# from math import pi

# def find_farthest_orbit (orbits):
#     # max_value = 0
#     # max_orbit = orbits[0]
#     # for item in orbits:
#     #     if item[0] != item[1]:
#     #         if max_value < item[0] * item[1]:
#     #             max_value = item[0] * item[1]
#     #             max_orbit = item
#     # return max_orbit
#     list1 = [i for i in orbits if i[0] != i[1]]
#     list_s = [pi * i[0] *i[1] for i in list1]
#     max_s = list_s.index(max(list_s))
#     return list1[max_s]
                
    


# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits)) # расстоновка для кортежа(чтобы вывод был без скобочек)

# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод: 
# values = [0, 2, 10, 6] 
# if same_by(lambda x: x % 2, values):
# print(‘same’)
# else:
# print(‘different’)
# Вывод:
# same
def same_by(characteristic, object):
    result = True
    list_1 = [characteristic(item) for item in object]
    for i in range(len(list_1)-1):
        if list_1[i]  != list_1[i+1]:
            result = False
    return result

values = [1, 3, 5, 8]
if same_by(lambda x: x % 2, values):
    print('same')
else:
    print('different')